service: serverless-chat

provider:
  name: aws
  runtime: python3.8
  region: ap-south-1
  websocketApiName: serverless-chat-api
  websocketApiRouteSelectionExpression: $request.body.action
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "execute-api:ManageConnections"
      Resource:
        - "arn:aws:execute-api:*:*:**/@connections/*"
    - Effect: Allow
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:BatchGetItem"
        - "dynamodb:BatchWriteItem"
        - "dynamodb:Scan"
        - "dynamodb:Query"
      Resource:
        - "arn:aws:dynamodb:ap-south-1:*:*"

functions:
    connectionManager:
        handler: handlers/handler.connection_manager
        events:
            - websocket:
                route: $connect
                authorizer:
                  name: wsTempTokenAuthorizer
                  resultTtlInSeconds: 0
                  identitySource:
                    - 'route.request.querystring.token'
                  type: request
            - websocket:
                route: $disconnect
    defaultMessage:
        handler: handlers/handler.default_message
        events:
            - websocket:
                route: $default
    getRecentMessages:
        handler: handlers/handler.get_recent_messages
        events:
            - websocket:
                route: getRecentMessages
    sendMessage:
        handler: handlers/handler.send_message
        events:
            - websocket:
                route: sendMessage
                authorizer:
#                    # name: auth    NOTE: you can either use "name" or arn" properties
#                    arn: arn:aws:lambda:us-east-1:1234567890:function:auth
#                    identitySource:
#                      - 'route.request.header.Auth'
#                      - 'route.request.querystring.Auth'
    setConversation:
        handler: handlers/handler.set_conversation
        events:
            - http:
                method: post
                cors:
                    origin: '*'
                    headers:
                      - Content-Type
                      - t2m-authtoken
                    allowCredentials: false
                path: set-conversation
                authorizer:
                    name: tokenAuthorizer
                    resultTtlInSeconds: 0
                    identitySource: method.request.header.t2m-authtoken
                    type: request
    userMigrate:
        handler: handlers/handler.user_migrate
    ping:
        handler: handlers/handler.ping
        events:
            - http:
                path: ping
                method: get
    getUsername:
        handler: handlers/get/get_username.get_username
        events:
          - http:
              path: get-username
              method: get
              cors:
                  origin: '*'
                  headers:
                    - Content-Type
                    - t2m-temptoken
                  allowCredentials: false
              authorizer:
                name: tempTokenAuthorizer
                resultTtlInSeconds: 0
                identitySource: method.request.header.t2m-temptoken
                type: request
    tokenAuthorizer:
      handler: helpers/authorizers/user_pool_authorizer.lambda_handler
    tempTokenAuthorizer:
      handler: helpers/authorizers/temp_token_authorizer.lambda_handler
    wsTempTokenAuthorizer:
      handler: helpers/authorizers/ws_temptoken_auth.lambda_handler

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

plugins:
  - serverless-python-requirements
custom:
  pythonRequirements:
    dockerizePip: true
    noDeploy: []

  stage: ${opt:stage, self:provider.stage}
